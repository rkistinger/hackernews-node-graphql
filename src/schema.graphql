# Define our GraphQL schema written in the GQL schema definition language (SDL).

# Every GQL schema has three root types* - Query, Mutation, & Subscription
# made up of root fields that define the available API operations.

# GQL schema also includes custom object types (User, Post, Dog, etc.).

# Fields can be:
# - scalar types (Int, Float, String, Boolean, ID)
# - object types

# Fields can have type modifiers:
# - ! (required / non-null)
# - [] (list is required / not null)
# - [User!]! (required list without any null elements - empty list is OK)

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  link(id: ID!): Link
}

type Mutation {
  createLink(url: String!, description: String!): Link!
  updateLink(id: ID!, url: String, description: String): Link
  deleteLink(id: ID!): Link
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Feed {
  links: [Link!]!
  count: Int!
}

enum LinkOrderByInput {
  description_asc
  description_desc
  url_asc
  url_desc
  createdAt_asc
  createdAt_desc
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
